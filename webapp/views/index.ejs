<!doctype html>
<html lang="en">
<head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Bootstrap demo</title>
        <link rel="stylesheet" href="/static/css/bootstrap.min.css">
        <link rel="stylesheet" href="/static/bootstrap-icons.css">

    </head>
    <body> 
        <script src="/static/js/bootstrap.bundle.min.js"></script>
 
        <div class="container">

            <div class="row mb-3 justify-content-center" style="padding-top: 200px;">
                <div class="col-2">
                    <button id="speak" type="button" class="btn btn-light w-100">Hold to Talk</button>
                </div>
            </div>

            <div class="row justify-content-center text-center">
                <div class="col-3">
                    <i id="reaction-icon" class="bi bi-emoji-neutral" style="font-size: 148px; color: rgb(192, 192, 192);"></i>
                </div>
            </div>

            <div class="row mb-3 justify-content-center text-center">
                <div class="col-3">
                    <p id = "txt-reply"> </p>
                </div>
            </div>

            <div class="row mb-3 justify-content-center">
                <div class="col-3">
                    <audio id="player"></audio>
                </div>
            </div>

        </div>

        <script>

            const pptButton = document.getElementById('speak');
            const player = document.getElementById('player');
            const reactionIcon = document.getElementById('reaction-icon');
            const replyField = document.getElementById('txt-reply');

            var conversation = [];

            const handleSuccess = async function(stream) {

                var recordedChunks = [];
                const mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });

                // Reset recorded data when recorder starts.
                mediaRecorder.addEventListener('start', function() {
                    recordedChunks = [];
                });

                // While recorder is active, add recorded data to an array.
                mediaRecorder.addEventListener('dataavailable', function(e) {
                    if (e.data.size > 0) recordedChunks.push(e.data);
                });

                mediaRecorder.addEventListener('stop', async function() {

                    const audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });
                    if(audioBlob.size < 1000000) {

                        // Will send Blob as multipart/formdata.
                        const convertServiceFormData = new FormData();
                        convertServiceFormData.append('recording', audioBlob, 'recording.webm');

                        // Send a request to convert .webm to .wav type.
                        const response = await fetch('http://localhost:3000/convert', {
                            method: 'POST',
                            body: convertServiceFormData,
                        }).then(function(response) {
                            if (!response.ok) {
                                throw new Error('Response to Conversion Service not OK');
                            }
                            return response.blob();
                        }).then(async function(convertedBlob) {

                            /*const urlSource = URL.createObjectURL(convertedBlob);
                            player.src = urlSource;
                            player.play()*/

                            const flaskAppFormData = new FormData();
                            flaskAppFormData.append('converted', convertedBlob, 'converted.wav');

                            // Send the .wav file to the Flask application.
                            const response = await fetch('http://localhost:5050/reply', {
                                method: 'POST',
                                body: flaskAppFormData,
                            }).then(function(response) {
                                if (!response.ok) {
                                    throw new Error('Reply Service response not OK');
                                }
                                return response.json();
                            }).then(function(data){

                                // Convert encoded data and play it in the browser.
                                var dataUrl = ''
                                if (data['base64_wav']) {
                                    dataUrl = 'data:audio/wav;base64,' + data['base64_wav']
                                } else if (data['base64_mp3']) {
                                    dataUrl = 'data:audio/mp3;base64,' + data['base64_mp3']
                                }

                                if(dataUrl.length > 0) {
                                    fetch(dataUrl)
                                    .then(result => result.blob())
                                    .then(function(replyBlob){
                                        const urlSource = URL.createObjectURL(replyBlob);
                                        player.src = urlSource;
                                        player.play()
                                    })
                                }
                                
                                replyField.innerHTML = "";
                                replyField.innerHTML = data["txt_reply"];

                                // Change the icon based on the estimated sentiment of the reply.
                                if(data["reply_sentiment"] == 'positive') {
                                    reactionIcon.classList.remove('bi-emoji-frown');
                                    reactionIcon.classList.remove('bi-emoji-neutral');
                                    if(!reactionIcon.classList.contains('bi-emoji-smile')) {
                                        reactionIcon.classList.add('bi-emoji-smile');
                                    }
                                } else if(data["reply_sentiment"] == 'negative') {
                                    reactionIcon.classList.remove('bi-emoji-smile');
                                    reactionIcon.classList.remove('bi-emoji-neutral');
                                    if(!reactionIcon.classList.contains('bi-emoji-frown')) {
                                        reactionIcon.classList.add('bi-emoji-frown');
                                    }
                                } else {
                                    reactionIcon.classList.remove('bi-emoji-smile');
                                    reactionIcon.classList.remove('bi-emoji-frown');
                                    if(!reactionIcon.classList.contains('bi-emoji-neutral')) {
                                        reactionIcon.classList.add('bi-emoji-neutral');
                                    }
                                }

                                // TODO: Show conversation history.
                                conversation.push(data["txt_asr"])
                                conversation.push(data["txt_reply"])

                            }).catch(function(error){
                                console.error('Problem with your fetch operation to Reply Service:', error);
                            });

                        }).catch(function(error) {
                            console.error('Problem with your fetch operation to Conversion Service:', error);
                        });

                    } else {
                        alert("Recording size limit exceeded.");
                    }

                });

                // TODO: Consider having the system listen continuously instead of stopping & starting.
                pptButton.addEventListener('mousedown', function() {
                    mediaRecorder.start();
                    pptButton.classList.toggle('btn-dark');

                });

                pptButton.addEventListener('mouseup', function() {
                    mediaRecorder.stop();
                    pptButton.classList.toggle('btn-dark');
                });
 
            };

            navigator.mediaDevices
            .getUserMedia({audio: true, video: false})
            .then(handleSuccess);

        </script>
    </body>
</html>